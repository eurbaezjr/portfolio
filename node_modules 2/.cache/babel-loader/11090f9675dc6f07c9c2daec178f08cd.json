{"ast":null,"code":"var _jsxFileName = \"/Users/eduardourbaez/Documents/UCLA_Extension/portfolio/src/components/ProjectSearch/index.js\";\nimport React from 'react';\nimport API from \"../../utils/API\";\nimport SearchForm from \"./SearchForm\";\nimport ProjectCard from \"../ProjectCard\";\nimport Wrapper from \"../Wrapper\";\nimport \"./style.css\";\n\nclass ProjectSearch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadGitData = el => {\n      API.getStarredRepos(el).then(res => {\n        let arr = [];\n        res.data.map(el => {\n          let object = this.loadRepoContent(el);\n          return arr.push(object);\n        });\n        console.log(arr);\n        return arr;\n      }).catch(err => console.log(err));\n    };\n\n    this.loadRepoContent = e => {\n      let obj = {\n        repoName: e.name,\n        gif: \"\",\n        readMeContent: \"\",\n        url: e.html_url,\n        id: e.id,\n        description: e.description\n      };\n      API.getReposContent(e.full_name).then(res => {\n        res.data.map(el => {\n          if (el.url.includes(\".gif\") === true) {\n            let gif = this.cdnModify(el.download_url);\n            return obj.gif = gif;\n          } else if (el.url.includes(\"README.md\") === true) {\n            let readme = this.cdnModify(el.download_url);\n            return obj.readMeContent = readme;\n          } else {\n            return \"\";\n          }\n        });\n      }).catch(err => console.log(err));\n      return obj;\n    };\n\n    this.cdnModify = link => {\n      // Prior modify https://raw.githubusercontent.com/eurbaezjr/day-scheduler/master/day-scheduler.gif\n      // After modify https://cdn.jsdelivr.net/gh/eurbaezjr/day-scheduler/day-scheduler.gif\n      let string = link.replace(\"raw.githubusercontent.com\", \"cdn.jsdelivr.net/gh\");\n      let stringTwo = string.replace(\"/master\", \"\");\n      return stringTwo;\n    };\n\n    this.handleInputChange = event => {\n      const name = event.target.name;\n      const value = event.target.value;\n      this.setState({\n        [name]: value\n      });\n      event.preventDefault();\n      setTimeout(() => {\n        return this.searchProjects(this.state.search);\n      }, 1000);\n    };\n\n    this.state = {\n      gitHubUserName: \"eurbaezjr\",\n      search: \"\",\n      starred: [],\n      results: []\n    };\n  } // Start Github.API query prior DOM is ready\n\n\n  componentDidMount() {\n    this.loadGitData(this.state.gitHubUserName);\n  } // Queries gitHub API for user data on starred contents\n\n\n  // Filter for all projects based on user input data\n  // searchProjects = search => {\n  //   this.loadGitData(this.gitHubUserName)\n  //   const results = this.state.results.filter((result) => {\n  //    return result.name.toLowerCase().includes(search.toLowerCase()) !== false || result.occupation.toLowerCase().includes(search.toLowerCase()) !== false  || result.location.toLowerCase().includes(search.toLowerCase()) !== false \n  //   })\n  //   this.setState({ results });\n  // };\n\n  /* <div className='row'>\n  {this.state.results.map(result => (\n  <ProjectCard\n    id={result.id}\n    url={result.html_url}\n    key={result.id}\n    name={result.name}\n    image={result.image}\n    occupation={result.occupation}\n    location={result.location}>\n  </ProjectCard>\n  ))}\n  </div> */\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SearchForm, {\n      search: this.state.search,\n      handleInputChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default ProjectSearch;","map":{"version":3,"sources":["/Users/eduardourbaez/Documents/UCLA_Extension/portfolio/src/components/ProjectSearch/index.js"],"names":["React","API","SearchForm","ProjectCard","Wrapper","ProjectSearch","Component","constructor","props","loadGitData","el","getStarredRepos","then","res","arr","data","map","object","loadRepoContent","push","console","log","catch","err","e","obj","repoName","name","gif","readMeContent","url","html_url","id","description","getReposContent","full_name","includes","cdnModify","download_url","readme","link","string","replace","stringTwo","handleInputChange","event","target","value","setState","preventDefault","setTimeout","searchProjects","state","search","gitHubUserName","starred","results","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport API from \"../../utils/API\";\nimport SearchForm from \"./SearchForm\";\nimport ProjectCard from \"../ProjectCard\";\nimport Wrapper from \"../Wrapper\";\nimport \"./style.css\";\n\nclass ProjectSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    gitHubUserName: \"eurbaezjr\",\n    search: \"\",\n    starred: [],\n    results: []\n  }}\n  \n// Start Github.API query prior DOM is ready\ncomponentDidMount(){ \n  this.loadGitData(this.state.gitHubUserName)\n} \n\n// Queries gitHub API for user data on starred contents\n  loadGitData = (el) => {\n    API.getStarredRepos(el)\n      .then(res => {\n        let arr = [];\n        res.data.map(el => {\n         let object = this.loadRepoContent(el)\n        return arr.push(object)\n        })\n        console.log(arr)\n        return arr\n      })\n      .catch(err => console.log(err));\n  };\n\n// Queries gitHub API for the content in each repo in the starred content\nloadRepoContent = (e) => {\n let obj = {\n   repoName: e.name,\n   gif: \"\",\n   readMeContent: \"\", \n   url: e.html_url,\n   id: e.id,\n   description: e.description\n }\n   API.getReposContent(e.full_name)\n   .then(res => { \n    res.data.map(el => {\n    if (el.url.includes(\".gif\") === true) {\n     let gif = this.cdnModify(el.download_url)  \n    return obj.gif = gif\n    }\n    else if (el.url.includes(\"README.md\") === true){\n     let readme =  this.cdnModify(el.download_url)\n    return  obj.readMeContent = readme\n    }\n    else {\n      return \"\"\n    }\n  })\n}).catch(err => console.log(err));\n\nreturn obj\n\n}\n\n// routes gif and README through Content Delivery Network (CDN)\ncdnModify = (link) => {\n  // Prior modify https://raw.githubusercontent.com/eurbaezjr/day-scheduler/master/day-scheduler.gif\n  // After modify https://cdn.jsdelivr.net/gh/eurbaezjr/day-scheduler/day-scheduler.gif\n\nlet string = link.replace(\"raw.githubusercontent.com\", \"cdn.jsdelivr.net/gh\")\nlet stringTwo = string.replace(\"/master\", \"\")\nreturn stringTwo\n}\n\n// As user inputs information on the search form, set the state and trigger SearchProjects\n  handleInputChange = event => {\n    const name = event.target.name\n    const value = event.target.value\n    this.setState({\n      [name]: value\n    });\n    event.preventDefault();\n    setTimeout(() => {\n     return this.searchProjects(this.state.search);\n    }, 1000)\n  }\n\n// Filter for all projects based on user input data\n  // searchProjects = search => {\n  //   this.loadGitData(this.gitHubUserName)\n  //   const results = this.state.results.filter((result) => {\n  //    return result.name.toLowerCase().includes(search.toLowerCase()) !== false || result.occupation.toLowerCase().includes(search.toLowerCase()) !== false  || result.location.toLowerCase().includes(search.toLowerCase()) !== false \n  //   })\n  //   this.setState({ results });\n    \n  // };\n\n  /* <div className='row'>\n{this.state.results.map(result => (\n  <ProjectCard\n    id={result.id}\n    url={result.html_url}\n    key={result.id}\n    name={result.name}\n    image={result.image}\n    occupation={result.occupation}\n    location={result.location}>\n  </ProjectCard>\n))}\n</div> */\n\n  render() {\n    return (\n\n      <div>\n        <SearchForm\n          search={this.state.search}\n          handleInputChange={this.handleInputChange}\n        />\n        <Wrapper>\n          </Wrapper>\n      </div>\n    )\n  }\n}\n\nexport default ProjectSearch\n"]},"metadata":{},"sourceType":"module"}